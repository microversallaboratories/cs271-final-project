Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 20:38:01
%gamedev     (CS271_final_gamedev.asm			     Page 1 - 1


				TITLE gamedev     (CS271_final_gamedev.asm)

				; Author: 
				; Course / Project ID                 Date:
				; Description:

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 = 512				BUFFER_SIZE EQU <512>
 = 5				MAP_QTY     EQU <5>

 00000000			.data
 = 0dh, 0ah			endl        EQU <0dh, 0ah>                          ; End of Line Sequence
 00000000 40 27 73 20 41	gameTitle   BYTE "@'s Adventure", 0
	   64 76 65 6E 74
	   75 72 65 00
 0000000E 0000 0000 0028	consoleSize     SMALL_RECT <0, 0, 40, 20>
	   0014
 00000016 00000064		consoleCursor   CONSOLE_CURSOR_INFO <100, 0>        ; Set second Argument to 1 if want to see visible cursor
	   00000000

 0000001E  00000005 [		fileBuffer  BYTE MAP_QTY DUP(BUFFER_SIZE DUP (?))
	    00000200 [
	     00
	    ]
	   ]
 00000A1E 00000014		fileX       DWORD 20
 00000A22 0000000A		fileY       DWORD 10
 00000A26  00000200 [		curMap      BYTE BUFFER_SIZE DUP (?)
	    00
	   ]
 00000C26 00000000		curMapNum   DWORD 0
 00000C2A 00000041		fileName    DWORD "A", 0
	   00000000
 00000C32 00000000		fileHandle  HANDLE ?

 00000C36 0A			charX       BYTE    10                              ; Size of DL: 1 byte - starting xpos
 00000C37 06			charY       BYTE    6                               ; Size of DH: 1 byte - starting ypos
 00000C38 40 00			char        BYTE    "@", 0                          ; Character
 00000C3A 23 00			sharp       BYTE    "#", 0                          ; Sharp
 00000C3C  0000000A [		inventory   BYTE    10 DUP(?)                       ; Inventory; arr of chars
	    00
	   ]

 00000C46 00000000		consoleHandle   HANDLE 0
 00000C4A 00000000		bytesWritten    DWORD ?

 00000000			.code

 00000000			main    PROC
 00000000			Setup:
				    INVOKE  SetConsoleTitle, ADDR gameTitle
 00000000  68 00000000 R   *	    push   OFFSET gameTitle
 00000005  E8 00000000 E   *	    call   SetConsoleTitleA
				    INVOKE  GetStdHandle, STD_OUTPUT_HANDLE
 0000000A  6A F5	   *	    push    -00000000Bh
 0000000C  E8 00000000 E   *	    call   GetStdHandle
 00000011  A3 00000C46 R	    mov     consoleHandle, EAX

				    INVOKE  SetConsoleWindowInfo, 
				        consoleHandle,
				        TRUE,
				        ADDR consoleSize
 00000016  68 0000000E R   *	    push   OFFSET consoleSize
 0000001B  6A 01	   *	    push   +000000001h
 0000001D  FF 35 00000C46 R *	    push   consoleHandle
 00000023  E8 00000000 E   *	    call   SetConsoleWindowInfo

				    INVOKE  SetConsoleCursorInfo,
				        consoleHandle,
				        ADDR consoleCursor
 00000028  68 00000016 R   *	    push   OFFSET consoleCursor
 0000002D  FF 35 00000C46 R *	    push   consoleHandle
 00000033  E8 00000000 E   *	    call   SetConsoleCursorInfo

 00000038  68 0000001E R	    push    OFFSET fileBuffer       ; Put @fileBuffer to stack as reference 
 0000003D  6A 05		    push    MAP_QTY                 ; Put MAP_QTY to stack as value
 0000003F  68 00000200		    push    BUFFER_SIZE             ; Put BUFFER_SIZE to stack as value
 00000044  68 00000C2A R	    push    OFFSET fileName         ; Put fileName to stack as reference
 00000049  E8 00000065		    call    readMap                 ; Read Map files and store them in array

 0000004E  83 F8 00		    cmp     EAX, 0
 00000051  74 59		    je      GameExit                ; Jump to GameExit if EAX = 0
				    

 00000053			GameLoop:

 00000053			DrawBackground:
				    ; Don't call Clrscr, as it is slow
 00000053  B2 00		    mov     DL, 0
 00000055  B6 00		    mov     DH, 0
 00000057  E8 00000000 E	    call    Gotoxy

 0000005C  68 0000001E R	    push    OFFSET fileBuffer       ; Put @fileBuffer to stack as reference 
 00000061  68 00000A26 R	    push    OFFSET curMap           ; Put @curMap to stack as reference
 00000066  68 00000200		    push    BUFFER_SIZE             ; Put BUFFER_SIZE to stack as value 
 0000006B  FF 35 00000C26 R	    push    curMapNum               ; Put curMapNum to stack as value
 00000071  E8 000000C0		    call    drawMap                 ; Draw Map from array

 00000076			DrawCharacter:
 00000076  8A 15 00000C36 R	    mov     DL, charX           ; X-Coordinate
 0000007C  8A 35 00000C37 R	    mov     DH, charY           ; Y-Coordinate
 00000082  E8 00000000 E	    call    Gotoxy              ; locate Cursor
				    
				    INVOKE WriteConsole,        ; Write character '@'
				        consoleHandle,
				        ADDR char,
				        1,
				        ADDR bytesWritten,
				        0
 00000087  6A 00	   *	    push   +000000000h
 00000089  68 00000C4A R   *	    push   OFFSET bytesWritten
 0000008E  6A 01	   *	    push   +000000001h
 00000090  68 00000C38 R   *	    push   OFFSET char
 00000095  FF 35 00000C46 R *	    push   consoleHandle
 0000009B  E8 00000000 E   *	    call   WriteConsoleA

 000000A0  E8 000000CD		    call    KeyInput            ; Read key and change coordinate
				                                ; Return 0 in EAX if Exiting, 1 in EAX if Continuing
 000000A5  83 F8 00		    cmp     EAX, 0
 000000A8  74 02		    je      GameExit            ; Jump to GameExit if EAX = 0
 000000AA  EB A7		    jmp     GameLoop            ; Jump to GameLoop if EAX = 1

 000000AC			GameExit:
				    exit	                      ; exit to operating system
 000000AC  6A 00	   *	    push   +000000000h
 000000AE  E8 00000000 E   *	    call   ExitProcess

 000000B3			main    ENDP

				;-------------------------------------------------------------------------------------
 000000B3			readMap     PROC
				;
				;   Read Map from text file and store them in array
				;       Uses Register Indirect Mode 
				;   Receive:    array, MAP_QTY, BUFFER_SIZE, filename
				;   Return:     EAX
				;------------------------------------------------------------------------------------- 
 000000B3  55			    push    EBP
 000000B4  8B EC		    mov     EBP, ESP
 000000B6  60			    pushad
 000000B7  8B 7D 14		    mov     EDI, [EBP+20]       ; @Array
 000000BA  8B 4D 10		    mov     ECX, [EBP+16]       ; Map Quantity
 000000BD  8B 5D 08		    mov     EBX, [EBP+8]        ; fileName
 000000C0  BE 00000001		    mov     ESI, 1              ; Used to increment FileName

 000000C5			ReadMapFromFile:
 000000C5  51			    push ECX
 000000C6			    FileIO:
 000000C6  8B D3		        mov     EDX, EBX        ; Filename (A, B, C, ... , Qty-1)
 000000C8  E8 00000000 E	        call    OpenInputFile   ; Open the file
 000000CD  A3 00000C32 R	        mov     fileHandle, EAX ; Check how file went through
 000000D2  83 F8 FF		        cmp     EAX, INVALID_HANDLE_VALUE
 000000D5  75 07		        jne     fileOpened      ; Jump to next stage if opened
 000000D7  B8 00000000		        mov     EAX, 0
 000000DC  EB 54		        jmp     EndReading      ; Exit Procedure with EAX = 0, which Exit program

 000000DE			    fileOpened:
 000000DE  8B D7		        mov     EDX, EDI            ; Load Address of Array to EDX
 000000E0  8B 4D 0C		        mov     ECX, [EBP+12]       ; Load Buffer Size to ECX
 000000E3  E8 00000000 E	        call    ReadFromFile        ; Read from the file and store it to address of array with buffer size total
 000000E8  73 1A		        jnc     bufferSizeOK         
				        mWrite  <"Error reading File. ", 0dh, 0ah>
 00000C4E		     1		.data		
 00000C4E 45 72 72 6F 72     1		??0000 BYTE "Error reading File. ", 0dh, 0ah,0	
	   20 72 65 61 64
	   69 6E 67 20 46
	   69 6C 65 2E 20
	   0D 0A 00
 000000EA		     1		.code
 000000EA  52		     1		push	edx
 000000EB  BA 00000C4E R     1		mov	edx,OFFSET ??0000
 000000F0  E8 00000000 E     1		call	WriteString
 000000F5  5A		     1		pop	edx
 000000F6  EB 22		        jmp     fileClose

 000000F8			    checkBufferSize:
 000000F8  3B 45 0C		        cmp     EAX, [EBP+12]       ; Compare Actual Map Size
 000000FB  72 07		        jb      bufferSizeOK        ; Jump to Size display if below Buffer size
 000000FD  B8 00000000		        mov     EAX, 0
 00000102  EB 2E		        jmp     EndReading          ; Exit Procedure with EAX = 0, which Exit program

 00000104			    bufferSizeOK:
				        mWrite  "File size: "       ; Debug purpose. Displays the size of map file
 00000C65		     1		.data		
 00000C65 46 69 6C 65 20     1		??0001 BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 00000104		     1		.code
 00000104  52		     1		push	edx
 00000105  BA 00000C65 R     1		mov	edx,OFFSET ??0001
 0000010A  E8 00000000 E     1		call	WriteString
 0000010F  5A		     1		pop	edx
 00000110  E8 00000000 E	        call    WriteDec
 00000115  E8 00000000 E	        call    Crlf

 0000011A			    fileClose:
 0000011A  A1 00000C32 R	        mov     EAX, fileHandle
 0000011F  E8 00000000 E	        call    CloseFile           ; Close opened file

 00000124  03 7D 0C		    add     EDI, [EBP+12]           ; Increase current address pointing by Buffer size
 00000127  01 33		    add     [EBX], ESI              ; Increase file name (A -> B, B -> C, .... )
 00000129  59			    pop     ECX                     ; Pop ECX to continue counter
 0000012A  E2 99		    loop    ReadMapFromFile         ; Loop back to reading


 0000012C  61			    popad
 0000012D  B8 00000001		    mov     EAX, 1
 00000132			EndReading:
				                                    ; Immediately end procedure if this Label is called
 00000132  5D			    pop     EBP
 00000133  C2 000C		    ret     12
 00000136			readMap     ENDP
				;-------------------------------------------------------------------------------------

				;-------------------------------------------------------------------------------------
 00000136			drawMap     PROC
				;
				;   Read Map from text file and store them in array
				;       Uses Register Indirect Mode 
				;   Receive:    array, MAP_QTY, BUFFER_SIZE, filename
				;   Return:     EAX
				;-------------------------------------------------------------------------------------
 00000136  55			    push    EBP
 00000137  8B EC		    mov     EBP, ESP
 00000139  60			    pushad
 0000013A  8B 7D 14		    mov     EDI, [EBP+20]       ; @Array
 0000013D  8B 75 10		    mov     ESI, [EBP+16]       ; @curMap

 00000140  8B 45 0C		    mov     EAX, [EBP+12]       ; BUFFER_SIZE
 00000143  8B 5D 08		    mov     EBX, [EBP+8]        ; curMapNum
 00000146  F7 E3		    mul     EBX                 ; EAX = curMapNum * BUFFER_SIZE

 00000148  03 F8		    add     EDI, EAX            ; EDI is moved curMapNum * BUFFER_SIZE

 0000014A  8B 45 0C		    mov     EAX, [EBP+12]       ; BUFFER_SIZE
 0000014D  BB 00000004		    mov     EBX, 4              ; 4 to EBX
 00000152  99			    cdq
 00000153  F7 F3		    div     EBX                 ; BUFFER_SIZE / 4
 00000155  8B C8		    mov     ECX, EAX            ; Set loop counter to EAX
				    
 00000157			L1:
 00000157  8B 07		    mov     EAX, [EDI]
 00000159  89 06		    mov     [ESI], EAX
 0000015B  83 C7 04		    add     EDI, 4
 0000015E  83 C6 04		    add     ESI, 4
 00000161  E2 F4		    loop    L1

 00000163  8B 75 10		    mov     ESI, [EBP+16]
 00000166  8B D6		    mov     EDX, ESI
 00000168  E8 00000000 E	    call    WriteString
				    
 0000016D  61			    popad
 0000016E  5D			    pop     EBP
 0000016F  C2 0010		    ret     16
 00000172			drawMap     ENDP
				;-------------------------------------------------------------------------------------


				;-------------------------------------------------------------------------------------
 00000172			KeyInput    PROC
				;
				;   Read Key Input and move character's coordination.
				;       Return 1 to EAX if continuing, 0 if Exiting Game
				;   Receive:    None
				;   Return:     EAX
				;-------------------------------------------------------------------------------------
 00000172			    KeyInputLoop:
 00000172  B8 0000000A		        mov     EAX, 10         ; Delay time
 00000177  E8 00000000 E	        call    Delay           ; Delay
 0000017C  E8 00000000 E	        call    ReadKey         ; Read Key input
 00000181  74 EF		        jz      KeyInputLoop    ; Jump back to KeyInputLoop if there is no key input

 00000183			    LeftKeyCheck:           
 00000183  66| 83 FA 25		        cmp     dx, VK_LEFT     ; Check if Left Arrow key is pressed
 00000187  75 09		        jne     UpKeyCheck
 00000189  80 2D 00000C36 R	        sub     charX, 1        ; Move character one space to the left
	   01

				        ;push OFFSET fileBuffer
				        ;call checkWall

 00000190  EB 3C		        jmp     KeyInputEnd

 00000192			    UpKeyCheck:
 00000192  66| 83 FA 26		        cmp     dx, VK_UP       ; Check if Up Arrow key is pressed
 00000196  75 09		        jne     RightKeyCheck
 00000198  80 2D 00000C37 R	        sub     charY, 1        ; Move character one space up
	   01
 0000019F  EB 2D		        jmp     KeyInputEnd

 000001A1			    RightKeyCheck:
 000001A1  66| 83 FA 27		        cmp     dx, VK_RIGHT    ; Check if Right Arrow key is pressed
 000001A5  75 09		        jne     DownKeyCheck
 000001A7  80 05 00000C36 R	        add     charX, 1        ; Move character one space to the right
	   01
 000001AE  EB 1E		        jmp     KeyInputEnd

 000001B0			    DownKeyCheck:
 000001B0  66| 83 FA 28		        cmp     dx, VK_DOWN     ; Check if Down Arrow key is pressed
 000001B4  75 09		        jne     EscapeKeyCheck
 000001B6  80 05 00000C37 R	        add     charY, 1        ; Move character one space down
	   01
 000001BD  EB 0F		        jmp     KeyInputEnd

 000001BF			    EscapeKeyCheck:
 000001BF  66| 83 FA 1B		        cmp     dx, VK_ESCAPE
 000001C3  75 07		        jne     OtherKeyPressed
 000001C5  B8 00000000		        mov     EAX, 0          ; Set EAX to 0, signifying Exit
				                                ; Does not Flush, since the game will Exit
 000001CA  EB 07		        jmp     EndInput

 000001CC			    OtherKeyPressed: 
 000001CC  EB 00		        jmp     KeyInputEnd     ; Ignore invalid input

 000001CE			    KeyInputEnd:                ; Move has been made
				        INVOKE  ReadKeyFlush    ; Clear the current key
 000001CE  E8 00000000 E   *	    call   ReadKeyFlush
				                                ; Set EAX to 1, signifying Continue

 000001D3			    EndInput:
 000001D3  C3			        ret
 000001D4			KeyInput    ENDP
				;-------------------------------------------------------------------------------------
				    
 000001D4			checkWall PROC      ; WIP
				    ;mov EDI, OFFSET sharp
				    ;lodsb
				    ;scasb

 000001D4  FD			    std
 000001D5  8B EC		    mov EBP, ESP
 000001D7  03 75 04		    add ESI, [EBP+4]


 000001DA			checkWall ENDP

				END main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 20:38:01
%gamedev     (CS271_final_gamedev.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000C71 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
KeyInput . . . . . . . . . . . .	P Near	 00000172 _TEXT	Length= 00000062 Public STDCALL
  KeyInputLoop . . . . . . . . .	L Near	 00000172 _TEXT	
  LeftKeyCheck . . . . . . . . .	L Near	 00000183 _TEXT	
  UpKeyCheck . . . . . . . . . .	L Near	 00000192 _TEXT	
  RightKeyCheck  . . . . . . . .	L Near	 000001A1 _TEXT	
  DownKeyCheck . . . . . . . . .	L Near	 000001B0 _TEXT	
  EscapeKeyCheck . . . . . . . .	L Near	 000001BF _TEXT	
  OtherKeyPressed  . . . . . . .	L Near	 000001CC _TEXT	
  KeyInputEnd  . . . . . . . . .	L Near	 000001CE _TEXT	
  EndInput . . . . . . . . . . .	L Near	 000001D3 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkWall  . . . . . . . . . . .	P Near	 000001D4 _TEXT	Length= 00000006 Public STDCALL
drawMap  . . . . . . . . . . . .	P Near	 00000136 _TEXT	Length= 0000003C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000157 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B3 Public STDCALL
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000053 _TEXT	
  DrawBackground . . . . . . . .	L Near	 00000053 _TEXT	
  DrawCharacter  . . . . . . . .	L Near	 00000076 _TEXT	
  GameExit . . . . . . . . . . .	L Near	 000000AC _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readMap  . . . . . . . . . . . .	P Near	 000000B3 _TEXT	Length= 00000083 Public STDCALL
  ReadMapFromFile  . . . . . . .	L Near	 000000C5 _TEXT	
  FileIO . . . . . . . . . . . .	L Near	 000000C6 _TEXT	
  fileOpened . . . . . . . . . .	L Near	 000000DE _TEXT	
  checkBufferSize  . . . . . . .	L Near	 000000F8 _TEXT	
  bufferSizeOK . . . . . . . . .	L Near	 00000104 _TEXT	
  fileClose  . . . . . . . . . .	L Near	 0000011A _TEXT	
  EndReading . . . . . . . . . .	L Near	 00000132 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000C4E _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000C65 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Text   	 512
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAP_QTY  . . . . . . . . . . . .	Text   	 5
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesWritten . . . . . . . . . .	DWord	 00000C4A _DATA	
charX  . . . . . . . . . . . . .	Byte	 00000C36 _DATA	
charY  . . . . . . . . . . . . .	Byte	 00000C37 _DATA	
char . . . . . . . . . . . . . .	Byte	 00000C38 _DATA	
consoleCursor  . . . . . . . . .	CONSOLE_CURSOR_INFO  00000016 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000C46 _DATA	
consoleSize  . . . . . . . . . .	SMALL_RECT  0000000E _DATA	
curMapNum  . . . . . . . . . . .	DWord	 00000C26 _DATA	
curMap . . . . . . . . . . . . .	Byte	 00000A26 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endl . . . . . . . . . . . . . .	Text   	 0dh, 0ah
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileBuffer . . . . . . . . . . .	Byte	 0000001E _DATA	
fileHandle . . . . . . . . . . .	DWord	 00000C32 _DATA	
fileName . . . . . . . . . . . .	DWord	 00000C2A _DATA	
fileX  . . . . . . . . . . . . .	DWord	 00000A1E _DATA	
fileY  . . . . . . . . . . . . .	DWord	 00000A22 _DATA	
gameTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inventory  . . . . . . . . . . .	Byte	 00000C3C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
sharp  . . . . . . . . . . . . .	Byte	 00000C3A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
